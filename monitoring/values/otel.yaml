namespaceOverride: "observability"
mode: deployment
image:
  repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-k8s
command:
  name: "otelcol-k8s"

clusterRole:
  create: true
  rules:
  - apiGroups:
    - ''
    resources:
    - 'pods'
    - 'nodes'
    - 'services'
    - 'endpoints'
    - 'namespaces'
    verbs:
    - 'get'
    - 'list'
    - 'watch'

config:
  receivers:
    prometheus:
      config:
        scrape_configs:
          - job_name: 'kubernetes-pods'
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                action: replace
                regex: '(.+):(?:\d+);(\d+)'
                replacement: '$1:$2'
                target_label: __address__
    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318

  processors:
    batch: {}

    memory_limiter:
      check_interval: 1s
      limit_mib: 400
      spike_limit_mib: 100

    resource:
      attributes:
        - key: k8s.cluster.environment
          value: sandbox
          action: insert
        - key: k8s.cluster.name
          value: kind-demo
          action: insert

    # transform/envoyjson:
    #   log_statements:
    #     - set(resource.attributes["service.name"], resource.attributes["k8s.pod.name"])
    #     - set(log.attributes["service.name"], resource.attributes["k8s.pod.name"])

  exporters:
    debug:
      verbosity: detailed

    otlphttp/prometheus:
      endpoint: "http://prometheus-server.observability.svc.cluster.local:80/api/v1/otlp"

    otlp/jaeger:
      endpoint: "jaeger-collector.observability.svc.cluster.local:14250"
      tls:
        insecure: true

    otlphttp/loki:
      endpoint: "http://loki.observability.svc.cluster.local:3100/otlp"
      tls:
        insecure: true

  service:
    telemetry:
      logs:
        level: debug
    pipelines:
      metrics:
        receivers: [prometheus, otlp]
        processors: [memory_limiter, batch, resource]
        exporters: [otlphttp/prometheus]

      traces:
        receivers: [otlp, jaeger]
        processors: [memory_limiter, batch, resource]
        exporters: [otlp/jaeger]

      logs:
        receivers: [otlp]
        processors: [memory_limiter, batch, resource]
        exporters: [debug, otlphttp/loki]